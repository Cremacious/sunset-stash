generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id
  name                   String
  email                  String          @unique
  emailVerified          Boolean
  image                  String?
  createdAt              DateTime
  updatedAt              DateTime
  comments               Comment[]
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  sentFriendRequests     FriendRequest[] @relation("SentRequests")

  posts                  Post[]
  purchases              Purchase[]
  stashItems             StashItem[]
  accounts               Account[]
  sessions               Session[]
  likedPosts             PostLike[]      @relation("UserLikes")
  friendships            Friendship[]    @relation("UserFriendships")
  friendFriendships      Friendship[]    @relation("FriendFriendships")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model StashItem {
  id        String          @id @default(cuid())
  name      String
  category  String          @default("")
  type      String          @default("")
  amount    String          @default("")
  thc       Float           @default(0)
  cbd       Float           @default(0)
  lineage   String          @default("")
  notes     String          @default("")
  dateAdded DateTime        @default(now())
  userId    String
  posts     PostStashItem[]
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PurchaseItem {
  id         String   @id @default(cuid())
  name       String
  category   String   @default("")
  type       String   @default("")
  amount     String   @default("")
  price      Float    @default(0)
  thc        Float    @default(0)
  cbd        Float    @default(0)
  lineage    String   @default("")
  notes      String   @default("")
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model Purchase {
  id         String         @id @default(cuid())
  dispensary String
  date       DateTime
  total      Float          @default(0)
  notes      String         @default("")
  createdAt  DateTime       @default(now())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      PurchaseItem[]
}

model Post {
  id         String          @id @default(cuid())
  author     String
  activity   String
  content    String
  createdAt  DateTime        @default(now())
  userId     String
  comments   Comment[]
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  stashItems PostStashItem[]
  likes      PostLike[]      @relation("PostLikes")
}

model Comment {
  id        String    @id @default(cuid())
  author    String
  content   String
  postId    String
  parentId  String?
  createdAt DateTime  @default(now())
  userId    String
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostStashItem {
  postId      String
  stashItemId String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  stashItem   StashItem @relation(fields: [stashItemId], references: [id], onDelete: Cascade)

  @@id([postId, stashItemId])
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("pending") // 'pending', 'friends', 'blocked'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   user   User @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendFriendships", fields: [friendId], references: [id], onDelete: Cascade)


  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model PostLike {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}
